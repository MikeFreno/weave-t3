// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
    id                 String      @id @default(cuid())
    name               String?
    password           String
    email              String      @unique
    emailVerified      Boolean?
    registered_at      DateTime    @default(now())
    image              String?
    Servers            Server[]
    sessions           Session[]
    memberships        Server_Member[]
    adminships         Server_Admin[]
    provider           String?
    refresh_token      String?
    access_token       String?
    token_expiration   DateTime?
    type               Json
    comments           Comment[]
}
model Server {
    id              Int                 @id @default(autoincrement())
    name            String
    blurb           String
    logo_url        String
    banner          String
    ownerId         String
    category        String
    owner           User                @relation(fields: [ownerId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    admin           Server_Admin[]
    members         Server_Member[]
    memberCount     Int
    membersOnline   Int
    channels        Server_Channel[]  


    @@index([ownerId])
}
model Server_Admin{
    id              Int            @id @default(autoincrement())
    roles           Json
    admin           User           @relation(fields: [adminId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    adminId         String          
    Server          Server         @relation(fields:[ServerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    ServerId        Int   
    assignedAt      DateTime       @default(now())
    assignedBy      String

    @@index([adminId])
    @@index([ServerId])
}
model Server_Member{
    id              Int           @id @default(autoincrement())
    member          User          @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    memberId        String          
    Server          Server        @relation(fields:[ServerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    ServerId        Int  
    joinedAt        DateTime      @default(now())
    invitedBy       String

    @@index([memberId])
    @@index([ServerId])
}
model Server_Channel{
    id               Int           @id @default(autoincrement())
    name             String        @unique
    Server           Server        @relation(fields:[ServerId],references: [id], onDelete: Cascade, onUpdate: Cascade)
    ServerId         Int
    comments         Comment[]     

    @@index([ServerId])
}

model Comment { 
    id               Int                      @id @default(autoincrement())
    user             User                     @relation(fields: [userId], references: [id])
    userId           String
    message          String
    channel          Server_Channel           @relation(fields: [channelName], references: [name], onDelete: Cascade)
    channelName      String

    @@index([userId])
    @@index([channelName])
}

model Session {
    id               String           @id @default(cuid())
    sessionToken     String           @unique
    userId           String
    expires          DateTime
    user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}
model VerificationToken {
    identifier      String
    token           String            @unique
    expires         DateTime

    @@unique([identifier, token])
}

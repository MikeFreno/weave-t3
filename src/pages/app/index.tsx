import React, {
  LegacyRef,
  MutableRefObject,
  useContext,
  useEffect,
  useRef,
  useState,
} from "react";
import Navbar from "@/src/components/Navbar";
import Head from "next/head";
import ThemeContext from "@/src/components/ThemeContextProvider";
import SideNav from "@/src/components/app/SideNav";
import ServerModal from "@/src/components/app/ServerModal";
import useOnClickOutside from "@/src/components/ClickOutsideHook";
import PublicServerModal from "@/src/components/app/PublicServerModal";
import BotServiceModal from "@/src/components/app/BotServiceModal";

const index = () => {
  const { isDarkTheme } = useContext(ThemeContext);
  const [serverModalShowing, setServerModalShowing] = useState(false);
  const [publicServerModalShowing, setPublicServerModalShowing] =
    useState(false);
  const [botModalShowing, setBotModalShowing] = useState(false);

  const switchRef = useRef<HTMLElement>() as MutableRefObject<HTMLElement>;
  const serverModalRef = useRef<HTMLElement>() as MutableRefObject<HTMLElement>;
  const serverButtonRef =
    useRef<HTMLElement>() as MutableRefObject<HTMLElement>;
  const publicServerModalRef =
    useRef<HTMLElement>() as MutableRefObject<HTMLElement>;
  const publicServerButtonRef =
    useRef<HTMLElement>() as MutableRefObject<HTMLElement>;
  const botModalRef = useRef<HTMLElement>() as MutableRefObject<HTMLElement>;
  const botButtonRef = useRef<HTMLElement>() as MutableRefObject<HTMLElement>;

  useEffect(() => {
    document.getElementById("html")?.classList.add("scollDisabled");
  }, []);

  useEffect(() => {
    if (serverModalShowing || publicServerModalShowing || botModalShowing) {
      document.getElementById("app-body")?.classList.add("modal-open");
    } else {
      document.getElementById("app-body")?.classList.remove("modal-open");
    }
  }, [serverModalShowing, publicServerModalShowing, botModalShowing]);

  useOnClickOutside([serverModalRef, serverButtonRef, switchRef], () =>
    setServerModalShowing(false)
  );
  useOnClickOutside(
    [publicServerModalRef, publicServerButtonRef, switchRef],
    () => setPublicServerModalShowing(false)
  );
  useOnClickOutside([botModalRef, botButtonRef, switchRef], () =>
    setBotModalShowing(false)
  );

  function serverModalToggle() {
    setServerModalShowing(!serverModalShowing);
  }

  function publicServerModalToggle() {
    setPublicServerModalShowing(!publicServerModalShowing);
  }

  function botModalToggle() {
    setBotModalShowing(!botModalShowing);
  }

  return (
    <div className="bg-zinc-300 dark:bg-zinc-700">
      <Head>
        <title> Web App | Weave</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar switchRef={switchRef} />
      <div id="app-body" className="h-screen w-screen">
        <SideNav
          serverModalToggle={serverModalToggle}
          serverButtonRef={serverButtonRef as LegacyRef<HTMLButtonElement>}
          publicServerModalToggle={publicServerModalToggle}
          publicServerButtonRef={
            publicServerButtonRef as LegacyRef<HTMLButtonElement>
          }
          botModalToggle={botModalToggle}
          botButtonRef={botButtonRef as LegacyRef<HTMLButtonElement>}
        />
      </div>
      <div>
        {serverModalShowing ? (
          <ServerModal
            serverModalRef={serverModalRef as LegacyRef<HTMLDivElement>}
          />
        ) : null}
        {publicServerModalShowing ? (
          <PublicServerModal
            publicServerModalRef={
              publicServerModalRef as LegacyRef<HTMLDivElement>
            }
          />
        ) : null}
        {botModalShowing ? (
          <BotServiceModal
            botModalRef={botModalRef as LegacyRef<HTMLDivElement>}
          />
        ) : null}
      </div>
    </div>
  );
};

export default index;
